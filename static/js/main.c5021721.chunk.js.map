{"version":3,"sources":["search_bg.svg","search.svg","loading.gif","icon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","url","updateUrl","showCodeCard","updateshowCodeCard","showFormCard","updateShowFormCard","showToggleBtn","updateShowToggleBtn","loading","updateLoading","data","updateData","useEffect","Prism","highlightAll","codeCard","style","maxWidth","className","JSON","stringify","formCard","onSubmit","e","preventDefault","fetch","then","res","json","src","require","alt","type","onChange","target","value","placeholder","href","toggleFormBtn","onClick","loadingCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,6GC4E5BC,MAxEf,WAAgB,IAAD,EAEYC,qBAFZ,mBAENC,EAFM,KAEDC,EAFC,OAG8BF,oBAAS,GAHvC,mBAGNG,EAHM,KAGQC,EAHR,OAI8BJ,oBAAS,GAJvC,mBAINK,EAJM,KAIQC,EAJR,OAKgCN,oBAAS,GALzC,mBAKNO,EALM,KAKSC,EALT,OAMoBR,oBAAS,GAN7B,mBAMNS,EANM,KAMGC,EANH,OAOcV,mBAAS,IAPvB,mBAONW,EAPM,KAOAC,EAPA,KASbC,qBAAU,kBAAMC,IAAMC,kBAEtB,IAwBMC,EAAWb,EACf,yBAAKc,MALW,CAChBC,SAAU,SAKR,0BAAMC,UAAU,uBAAuBC,KAAKC,UAAUV,EAAM,KAAM,KAC3D,KAELW,EAAWjB,EACf,0BAAMkB,SA9Ba,SAACC,GACpBA,EAAEC,iBACFf,GAAc,GACdJ,GAAmB,GACnBoB,MAAM,iCAAD,OAAkCzB,IACpC0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAhB,GACJC,EAAWD,GACXP,GAAmB,GACnBI,GAAoB,GACpBE,GAAc,QAqBhB,yBAAKoB,IAAKC,EAAQ,IAAyBC,IAAI,oBAC/C,2BAAOC,KAAK,MAAMC,SAAU,SAAAV,GAAC,OAAItB,EAAUsB,EAAEW,OAAOC,QAAQC,YAAY,sBACxE,4BAAQJ,KAAK,UAAb,eACA,uBAAGd,UAAU,aAAb,iDAAuE,uBAAGmB,KAAK,uBAAuBH,OAAO,UAAtC,gBAAvE,SACQ,KAENI,EAAgBhC,EACpB,yBAAKY,UAAU,gBAAgBqB,QAxBb,WAClBhC,GAAoB,GACpBF,GAAmB,GACnBF,GAAmB,KAsBjB,yBAAK0B,IAAKC,EAAQ,IAAsBC,IAAI,oBAC5C,+CACO,KAELS,EAAchC,EAClB,yBAAKU,UAAU,eACb,yBAAKW,IAAKC,EAAQ,IAAuBC,IAAI,oBAC7C,8CACO,KAEX,OACE,yBAAKb,UAAU,OACZsB,EACAF,EAED,4BAAI,yBAAKT,IAAKC,EAAQ,IAAoBC,IAAI,SAA9C,sBACCV,EACAN,IC3Da0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5021721.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search_bg.39cf6742.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.7b2bed56.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9202f5d0.gif\";","module.exports = __webpack_public_path__ + \"static/media/icon.57de4dbb.svg\";","import React, { useState, useEffect } from 'react';\nimport Prism from 'prismjs';\nimport '../src/prism.css';\n\nfunction App() {\n\n  const [url, updateUrl] = useState();\n  const [showCodeCard, updateshowCodeCard] = useState(false);\n  const [showFormCard, updateShowFormCard] = useState(true);\n  const [showToggleBtn, updateShowToggleBtn] = useState(false);\n  const [loading, updateLoading] = useState(false);\n  const [data, updateData] = useState({});\n\n  useEffect(() => Prism.highlightAll());\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    updateLoading(true);\n    updateShowFormCard(false);\n    fetch(`https://api.microlink.io/?url=${url}`)\n      .then(res => res.json())\n      .then(data => {\n        updateData(data);\n        updateshowCodeCard(true);\n        updateShowToggleBtn(true);\n        updateLoading(false);\n      })\n  }\n\n  const hanleToggle = () => {\n    updateShowToggleBtn(false);\n    updateShowFormCard(true);\n    updateshowCodeCard(false);\n  }\n\n  const codeStyle = {\n    maxWidth: \"80vw\"\n  }\n\n  const codeCard = showCodeCard ?\n    <pre style={codeStyle}>\n      <code className=\"language-javascript\">{JSON.stringify(data, null, 2)}</code>\n    </pre> : null;\n\n  const formCard = showFormCard ?\n    <form onSubmit={handleSubmit}>\n      <img src={require('../src/search_bg.svg')} alt=\"form background\" />\n      <input type=\"url\" onChange={e => updateUrl(e.target.value)} placeholder=\"add url link here\" />\n      <button type=\"submit\">get preview</button>\n      <p className=\"aboutCard\">This site provides the url link preview using <a href=\"https://microlink.io\" target=\"_blank\">microlink.io</a> api</p>\n    </form> : null;\n\n  const toggleFormBtn = showToggleBtn ?\n    <div className=\"toggleFormBtn\" onClick={hanleToggle}>\n      <img src={require('../src/search.svg')} alt=\"toggle form btn\" />\n      <p>try another url</p>\n    </div> : null;\n\n  const loadingCard = loading ?\n    <div className=\"loadingCard\">\n      <img src={require('../src/loading.gif')} alt=\"toggle form btn\" />\n      <span>loading....</span>\n    </div> : null;\n\n  return (\n    <div className=\"App\">\n      {loadingCard}\n      {toggleFormBtn}\n\n      <h2><img src={require('../src/icon.svg')} alt=\"icon\" /> Matesfeed Preview</h2>\n      {formCard}\n      {codeCard}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}